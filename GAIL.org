#+TITLE: GAIL: Generative Adversarial Imitation Learning

https://arxiv.org/abs/1606.03476

[[file:./images/screenshot-02.png]]


#+BEGIN_SRC python :tangle yes :noweb yes
import torch
import numpy as np

def main(args):
    <<initialise-parameters>>
    for i in range(100):
        <<sample-trajectories>>
        <<update-discriminator>>
        <<update-policy>>

if __name__ == '__main__':
    <<parse-args>>
    main(args)
#+END_SRC

* Parse Arguments
:PROPERTIES:
:header-args: :noweb-ref parse-args
:END:

#+BEGIN_SRC python
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('expert', help='path to expert model ("./data/walker_expert.pt")')

args = parser.parse_args()
#+END_SRC

* Initialise Algorithm
:PROPERTIES:
:header-args: :noweb-ref initialise-parameters
:END:

Generate the expert trajectories \(\tau_E \sim \pi_E\):
#+BEGIN_SRC python :noweb yes
expert_dataset = ExpertDataset(args.expert)
expert_data_loader = DataLoader(expert_dataset)

#+END_SRC

** Expert Dataset
:PROPERTIES:
:header-args: :noweb-ref expert-dataset
:END:


https://github.com/ikostrikov/pytorch-a2c-ppo-acktr-gail/blob/master/a2c_ppo_acktr/algo/gail.py
Loader for the expert trajectories
#+BEGIN_SRC python
class ExpertDataset(torch.utils.data.Dataset):
    def __init__(self, file_name, num_trajectories=4, subsample_frequency=20):
        all_trajectories = torch.load(file_name)

        perm = torch.randperm(all_trajectories['states'].size(0))
        idx = perm[:num_trajectories]

        self.trajectories = {}

        # See https://github.com/pytorch/pytorch/issues/14886
        # .long() for fixing bug in torch v0.4.1
        start_idx = torch.randint(
            0, subsample_frequency, size=(num_trajectories, )).long()

        for k, v in all_trajectories.items():
            data = v[idx]

            if k != 'lengths':
                samples = []
                for i in range(num_trajectories):
                    samples.append(data[i, start_idx[i]::subsample_frequency])
                self.trajectories[k] = torch.stack(samples)
            else:
                self.trajectories[k] = data // subsample_frequency

        self.i2traj_idx = {}
        self.i2i = {}

        self.length = self.trajectories['lengths'].sum().item()

        traj_idx = 0
        i = 0

        self.get_idx = []

        for j in range(self.length):

            while self.trajectories['lengths'][traj_idx].item() <= i:
                i -= self.trajectories['lengths'][traj_idx].item()
                traj_idx += 1

            self.get_idx.append((traj_idx, i))

            i += 1


    def __len__(self):
        return self.length

    def __getitem__(self, i):
        traj_idx, i = self.get_idx[i]

        return self.trajectories['states'][traj_idx][i], self.trajectories['actions'][traj_idx][i]

#+END_SRC

* Sample Trajectories
:PROPERTIES:
:header-args: :noweb-ref sample-trajectories
:END:

#+BEGIN_SRC python
...
#+END_SRC

* Update the Discriminator
:PROPERTIES:
:header-args: :noweb-ref update-discriminator
:END:

#+BEGIN_SRC python

#+END_SRC

* Update the Policy
:PROPERTIES:
:header-args: :noweb-ref update-policy
:END:

#+BEGIN_SRC python

#+END_SRC
