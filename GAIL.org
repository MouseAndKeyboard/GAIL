#+TITLE: GAIL: Generative Adversarial Imitation Learning

https://arxiv.org/abs/1606.03476

[[file:./images/screenshot-02.png]]


#+BEGIN_SRC python :tangle yes :noweb yes
import torch
import numpy as np

def main(args):
    <<initialise-parameters>>
    for i in range(100):
        <<sample-trajectories>>
        <<update-discriminator>>
        <<update-policy>>

if __name__ == '__main__':
    <<parse-args>>
    main(args)
#+END_SRC

* Parse Arguments
:PROPERTIES:
:header-args: :noweb-ref parse-args
:END:

#+BEGIN_SRC python
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('expert', help='path to expert model ("./data/walker_expert.pt")')

args = parser.parse_args()
#+END_SRC

* Initialise Algorithm
:PROPERTIES:
:header-args: :noweb-ref initialise-parameters
:END:

Generate the expert trajectories \(\tau_E \sim \pi_E\):
#+BEGIN_SRC python
all_trajectories = torch.load(args.expert)
#+END_SRC

* Sample Trajectories
:PROPERTIES:
:header-args: :noweb-ref sample-trajectories
:END:

#+BEGIN_SRC python
...
#+END_SRC

* Update the Discriminator
:PROPERTIES:
:header-args: :noweb-ref update-discriminator
:END:

#+BEGIN_SRC python

#+END_SRC

* Update the Policy
:PROPERTIES:
:header-args: :noweb-ref update-policy
:END:

#+BEGIN_SRC python

#+END_SRC
